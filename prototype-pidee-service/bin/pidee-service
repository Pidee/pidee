#!/usr/bin/env node

// Pidee Service
// =============
// This service is intended to be demonized to run in the background. It monitors the state of the Pidee

// Modules
// =======
var W = require( 'w-js' );
var PideeUtils = require( '../libs/pidee-utils' );
var PideeGpioConnect = require( '../libs/pidee-gpio-connect' );
var fs = require( 'fs' );
var net = require( 'net' );
var Bacon = require( 'baconjs' );

// Make & Init
// ===========

function make () {
    return {
        socketFilePath: '/tmp/pidee.sock',
        user: 'pidee'
    };
}

var init = W.composePromisers( confirmSuperUser,
                               makePideeGpioConnect,
                               dropSuperUserPrivilages,
                               runTestSequence,
                               unlinkSocketFile,
                               makeServer,
                               bindServer,
                               changeSocketPermissions,
                               PideeUtils.makeReporter( 'Started', 'Pidee service running' ) );

init( make() )
    .error( function ( err ) {
        PideeUtils.report( 'Error', 'Failed to create Pidee service.', err );
        throw err;
    })
    .success( function ( app ) {
        console.log( app );
    });

// Promisers
// =========

function confirmSuperUser ( service ) {
    return W.promise( function ( rehasEnoughWordshasEnoughWordshasEnoughWordshasEnoughWordssolve, reject ) {
        if ( process.getuid() === 0 ) {
            resolve( service );
        } else {
            reject( new Error( 'Needs to be run as root. Try running with sudo' ) );
        }
    });
}

function makePideeGpioConnect ( service ) {
    return W.promise( function ( resolve, reject ) {
        PideeGpioConnect
            .init( PideeGpioConnect.make() )
            .error( reject )
            .success( function ( pideeGpioConnect ) {
                service.connect = pideeGpioConnect;
                resolve( service );
            });
    });
}

function dropSuperUserPrivilages ( service ) {
    return W.promise( function ( resolve, reject ) {
        try {
            process.setuid( service.user );
        } catch ( err ) {
            return reject( err );
        }
        resolve( service );
    });
}

function runTestSequence ( service ) {
    return W.promise( function ( resolve, reject ) {

        function makeSetLeds( yellow, green, red ) {
            return function ( done ) {
                PideeGpioConnect.setLedState( service.connect, 0, yellow );
                PideeGpioConnect.setLedState( service.connect, 1, green );
                PideeGpioConnect.setLedState( service.connect, 2, red );
                done();
            };
        }

        function taskToSequence( y, g, r, delay ) { sequence.then( makeSetLeds( y, g, r ) ).delay( delay ); }

        var tasks = service.connect.config.get( 'enablePwm' )
                ? [ [ 0,0,0, 100 ], [ 0.2, 0.2, 0.2, 100 ], [ 0.3, 0.3, 0.3, 100 ], [ 0.4, 0.4, 0.4, 100 ], [ 0.5, 0.5, 0.5, 100 ], [ 0.6, 0.6, 0.6, 100 ], [ 0.7, 0.7, 0.7, 100 ], [ 0.8, 0.8, 0.8, 100 ], [ 0.9, 0.9, 0.9, 100 ], [ 0,0,0, 300 ], [ 1,0,0, 100 ], [ 0,1,0, 100 ], [ 0,0,1, 100 ], [ 0,0,0, 300 ], [ 1,0,0, 100 ], [ 0,1,0, 100 ], [ 0,0,1, 100 ], [ 0,0,0, 100 ] ]
                : [ [ 0,0,0, 100 ], [ 1,1,1, 200 ], [ 0,0,0, 100 ], [ 1,1,1, 200 ], [ 0,0,0, 300 ], [ 1,0,0, 100 ], [ 0,1,0, 100 ], [ 0,0,1, 100 ], [ 0,0,0, 300 ], [ 1,0,0, 100 ], [ 0,1,0, 100 ], [ 0,0,1, 100 ], [ 0,0,0, 0 ] ];

        var sequence = W.sequence();
        tasks.forEach( function ( task ) { taskToSequence.apply( this, task ); } );
        sequence.start();
        
        resolve( service );
    });
}

function unlinkSocketFile ( service ) {
    return W.promise( function ( resolve, reject ) {
        fs.stat( service.socketFilePath, function( err, stat ) {
            if ( !err ) {  
                return fs.unlink( service.socketFilePath, function ( err ) {
                    if ( err ) { return reject( err );  }
                    return resolve( service );
                });
            }
            return resolve( service );
        });
    });
}

function makeServer ( service ) {
    return W.promise( function ( resolve, reject ) {
        
        service.server = net.createServer( function( socket ) {

            // Add subscriptions tokens
            socket.subscriptions = [];
            
            PideeUtils.report( "CONNECTION", 'New client connection' );

            // Split into word array
            // =====================
            var dataStream = Bacon.fromEvent( socket, 'data' )
                    .map( function ( data ) { data.toString(); } )
                    .map( function ( str ) { str.split( ' ' ); } );

            // Filter and send errors
            // ======================
            var f = W.compose( filterOrDoSendError, socket, dataStream );
            var invalidMsg = "'Could not parse packet. May be invalid '";
            
            dataStream = f( hasValidToken, 1, W.join( invalidMsg, 'or missing token i.e. make sure packet starts with a token which beginning with `#`"' ) );
            dataStream = f( hasValidDomain, 2, W.join( invalidMsg, 'or missing domain i.e. domain should be like: `led.yellow`, `switch`, `dip.3`"' ) );
            dataStream = f( hasValidMethod, 3, W.join( invalidMsg, 'or missing method i.e. GET, SET, SUBSCRIBE, UNSUBSCRIBE"' ) );
            dataStream = f( hasAnyRequiredValues, 4, '"Missing value"' );
            dataStream = f( W.compose( W.partial( isMethod, 'GET' ), hasValidDomainForGetMethod ), 5, '"GET not allowed on this domain" E.g. you cannot GET an LED values"' );
            dataStream = f( W.compose( W.partial( isMethod, 'SET' ), hasValidDomainForSetMethod ), 6, '"SET not allowed on this domain" E.g. you cannot SET the button value"' );
            dataStream = f( W.compose( W.partial( isMethod, 'SUBSCRIBE' ), hasValidDomainForSubscriptionMethods ), 7, '"SUBSCRIBE not allowed on this domain" E.g. you cannot SUBSCRBE to the LED value"' );
            dataStream = f( W.compose( W.partial( isMethod, 'UNSUBSCRIBE' ), hasValidDomainForSubscriptionMethods ), 8, '"UNSUBSCRIBE not allowed on this domain" E.g.  you cannot UNSUBSCRIBE to the LED value"' );

            // Action and respond 
            // ==================

            // GET
            // ---
            var getStream = dataStream.filter( W.partial( isMethod, 'GET' ) );

            // ### Button
            getStream
                .filter( W.partial( isDomain, 'button' ) )
                .onValue( function () {
                    
                });

            // ### Dip
            getStream
                .filter( W.partial( isDomain, 'dip' ) )
                .onValue( function () {
                    
                });

            // #### Specific Dip
            [ 0, 1, 2, 3, 4, 5, 6, 7 ]
                .forEach( function ( idx ) {
                    getStream
                        .filter( W.partial( isDomain, 'dip.' + idx ) )
                        .onValue( function () {
                            
                        });
                });

            // ### *
            getStream
                .filter( W.partial( isDomain, '*' ) )
                .onValue( function () {
                    
                });

            // SET
            // ---
            var setStream = dataStream.filter( W.partial( isMethod, 'SET' ) );

            // ### Led
            getStream
                .filter( W.partial( isDomain, 'led' ) )
                .onValue( function () {
                    
                });

            // #### Specific Led
            [ 'yellow', 'green', 'red' ]
                .forEach( function ( idx ) {
                    getStream
                        .filter( W.partial( isDomain, 'led.' + idx ) )
                        .onValue( function () {
                            
                        });
                });

            // SUBSCRIBE
            // ---------
            var subscribeStream = dataStream.filter( W.partial( isMethod, 'SUBSCRIBE' ) );

            // UNSUBSCRIBE
            // -----------
            var unsubscribeStream = dataStream.filter( W.partial( isMethod, 'UNSUBSCRIBE' ) );

            
        });
        resolve( service );
    });
}

function bindServer ( service ) {
    return W.promise( function ( resolve, reject ) {
        service.server.listen( service.socketFilePath );
        resolve( service );
    });
}

function changeSocketPermissions ( service ) {
    return W.promise( function ( resolve, reject ) {
        fs.chmod( service.socketFilePath, 666, function ( err ) {
            if ( err ) { return reject( err ); }
            resolve( service );
        });
        resolve( service );
    });
}

// Utils
// =====

// Protocol
// --------

// ### Validators

function negate ( v ) {
    return !v;
}

function hasValidToken ( arr ) {
    return arr.length > 1 && W.startsWith( arr[ 0 ], '#' );
}

function hasValidDomain ( arr ) {
   return  [ '*', 'led', 'led.yellow', 'led.green', 'led.red', 'dip', 'dip.0', 'dip.1', 'dip.2', 'dip.3', 'dip.4', 'dip.5', 'dip.6', 'dip.7', 'switch' ].indexOf( arr[2] ) > -1;
}

function hasValidMethod ( arr ) {
   return [ 'GET', 'SET', 'SUBSCRIBE', 'UNSUBSCRIBE' ].indexOf( arr[3] ) > -1;
}

function hasAnyRequiredValues ( arr ) {
    return !( getMethod( arr ) === 'SET' && arr.length < 4 );
}

function hasValidDomainForGetMethod ( arr ) {
    return [ 'dip', 'dip.0', 'dip.1', 'dip.2', 'dip.3', 'dip.4', 'dip.5', 'dip.6', 'dip.7', 'button' ].indexOf( getDomain( arr ) ) > -1;
}

function hasValidDomainForSetMethod ( arr ) {
    return [ 'led', 'led.yellow', 'led.green', 'led.red' ].indexOf( getDomain( arr ) ) > -1;
}

function hasValidDomainForSubscriptionMethods ( arr ) {
    return [ 'dip', 'dip.0', 'dip.1', 'dip.2', 'dip.3', 'dip.4', 'dip.5', 'dip.6', 'dip.7', 'button', '*' ].indexOf( getDomain( arr ) ) > -1;
}


function isMethod ( method, arr ) {
    return getMethod( arr ) === method;
}
    
function isDomain( domain, arr ) {
    return getDomain( arr ) === domain;
}

// ### Accesors

function getToken ( arr ) {
    return hasValidToken( arr ) ? arr[ 0 ] : '';
}

function getDomain ( arr ) {
    return arr[ 1 ];
}

function getMethod ( arr ) {
    return arr[ 2 ];
}

function getValue ( arr ) {
    return [ 3 ];
}

// ### Streams

function filterOrDoSendError( socket, stream, predicate, errorMessage ) {
    stream
        .filter( negate( predicate ) )
        .onValue( function ( arr ) {
            socket.write( makeErrorPacket().token( getToken( arr ) ).messaage( errorMessage ).get() );
        });
    return stream.filter( predicate );
}

// ### Errors

function makeErrorPacket () {
    return new ErrorPacket();
}

function ErrorPacket () {
    this.token = '';
    this.message = '';
    this.code = '0';
}

ErrorPacket.prototype.get = function () {
    return [ this.token, 'ERROR', this.code,  this.message ]
        .filter( W.isOk )
        .join( ' ' );
};

ErrorPacket.prototype.token = function ( token ) {
    this.token = token;
    return this;
};

ErrorPacket.prototype.message = function ( token ) {
    this.message = message;
    return this;
};

