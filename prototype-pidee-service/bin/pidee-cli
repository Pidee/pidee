#!/usr/bin/env node
// Pidee Cli
// =========
// Command line interface to Pidee

// Modules
// =======
var W = require( 'w-js' );
var commander = require( 'commander' );
var net = require( 'net' );

var options = {
    socketFilePath: '/tmp/pidee.sock'
};

commander
    .version( require( './../package' ).version );

commander
    .command( 'set [domain] [value]' )
    .description( 'e.g. `set led.yellow 1` or `set led 5`' )
    .action( function ( domain, value, options ) {
        
        if ( typeof domain !== 'string' ) {
            return exitWithError( "Error domain not recognised. Should be 'led', 'led.red', 'led.green' or 'led.yellow'" );
        }

        if ( typeof value === 'undefined' ) {
            return exitWithError( "Error color value not set" );
        }

        value = parseFloat( value, 10 );
        
        if ( isNaN( value ) ) {
            return exitWithError( "Error could not parse value." );
        }

        if ( value < 0 || value > 8 ) {
            return exitWithError( "Error value should be [0.0,1.0] or for domain 'led' [0,8]" );
        }

        makeOpenSocketConnection()
            .success( function ( socket ) {
                socket.on( 'data', function ( d ) {
                    console.log( 'Data:', d.toString( 'ascii' ) );
                });
                var packetStr = W.join( '#', Date.now(), ' ', domain, ' SET ', value );
                console.log( 'Writing:', packetStr );
                socket.write( packetStr, 'ascii', function () {
                    console.log( 'Should wait for a response' );
                    socket.end();
                });
            })
            .error( function () {
                exitWithError( ' Are sure `pidee-service` is running?\n  Could not connect. ' );
            });
        
    });

commander
    .command( 'get [domain]' )
    .description( 'eg. `get button`, `get dip`, `get dip.7`' )
    .action( function ( domain ) {
        if ( typeof domain !== 'string' ) {
            return exitWithError( "Error domain not recognised. Should be '*', 'dip', 'button' for example" );
        }

        makeOpenSocketConnection()
            .success( function ( socket ) {
                socket.on( 'data', function ( d ) {
                    console.log( 'Data:', d.toString( 'ascii' ) );
                });
                var packetStr = W.join( '#', Date.now(), ' ', domain, ' GET ' );
                console.log( 'Writing:', packetStr );
                socket.write( packetStr, 'ascii', function () {
                    console.log( 'Should wait for a response' );
                    socket.end();
                });
            })
            .error( function () {
                exitWithError( ' Are sure `pidee-service` is running?\n  Could not connect. ' );
            });
        
    });


// commander
//     .command( 'dip' )
//     .description( 'reads all DIP switch values as an unsigned byte, switch 1 is LSB' )
//     .action( function () {
//         console.log( 'should read dip' );
//     });

// commander
//     .command( 'switch [switch-number]' )
//     .description( 'reads a switch value as either 0 or 1' )
//     .action( function ( switchNumber ) {
        
//         if ( typeof switchNumber === 'undefined' ) {
//             return exitWithError( "Error could not parse switch number" );
//         }

//         switchNumber = parseFloat( switchNumber, 10 );

//         if ( isNaN( switchNumber ) ) {
//             return exitWithError( "Error could not parse value. It should be between 0 and 1" );
//         }

//         if ( switchNumber < 0 || switchNumber > 6 ) {
//             return exitWithError( "Error switch number must be between 0 and 6" );
//         }
        
//         console.log( 'should read dip switch number', switchNumber );
//     });

commander.parse( process.argv );

// Socket Connection

function makeOpenSocketConnection () {
    return W.promise( function ( resolve, reject ) {
        var socket;
        socket = net.createConnection( options.socketFilePath, function () {
            resolve( socket );
        });
        socket.on( 'error', reject );
    });
}

// Utils
// =====

function exitWithError ( messages ) {
    messages = W.toArray( arguments );
    messages.unshift( '\nError:\n' );
    messages.push( '\n' );
    
    console.error.apply( console, messages );
    process.exit( 1 );
}
