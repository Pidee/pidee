#!/bin/bash


function print_help {
    printf "\n  Usage: pidee-cli [options] [command]\n"

    printf "\n  Commands \n\n"
    printf "    get [domain]         e.g. 'pidee-cli get dip.3'\n"
    printf "    set [domain] [value] e.g. 'pidee-cli set led.yellow 1'\n"
    printf "    subscribe [domain]   e.g. 'pidee-cli subscribe button'\n"

    printf "\n  Options:\n\n"
    printf "    -h, --help           Show this help information\n"
    printf "    -l, --list-domains   List all domains\n"

    printf "\n"
}

function print_domains {
    printf "\n Domains:\n\n"
    printf " ┌───────────────────────┐\n"
    printf " │ Domains     │ Range   │\n"
    printf " │─────────────┼─────────│\n"
    printf " │ all         │         │\n"
    printf " │ led         │ [0,8]   │\n"
    printf " │ led.yellow  │ [0,1]   │\n"
    printf " │ led.green   │ [0,1]   │\n"
    printf " │ led.red     │ [0,1]   │\n"
    printf " │ dip         │ [0,255] │\n"
    printf " │ dip.0       │ [0,1]   │\n"
    printf " │ dip.1       │ [0,1]   │\n"
    printf " │ dip.2       │ [0,1]   │\n"
    printf " │ dip.3       │ [0,1]   │\n"
    printf " │ dip.4       │ [0,1]   │\n"
    printf " │ dip.5       │ [0,1]   │\n"
    printf " │ dip.6       │ [0,1]   │\n"
    printf " │ dip.7       │ [0,1]   │\n"
    printf " │ button      │ [0,1]   │\n"
    printf " └───────────────────────┘\n\n"

    printf "  Methods for domain:\n\n"
    printf " ┌─────────────────────────────────┐\n"
    printf " │         │ GET │ SET │ SUBSCRIBE │\n"
    printf " │─────────┼─────┼─────┼───────────│\n"
    printf " │ all     │  x  │     │     x     │\n"
    printf " │ led     │     │  x  │           │\n"
    printf " │ dip     │  x  │     │     x     │\n"
    printf " │ button  │  x  │     │     x     │\n"
    printf " └─────────────────────────────────┘\n\n"
}

# If no options, show help and quit
if [[ $# -eq 0 ]] ; then
    print_help
    exit 0
fi

# Parse options
SHOW_HELP=0
LIST_DOMAINS=0
COMMAND=""
DOMAIN=""
VALUE=""

for a in "$@"
do
    if [ $a = "-h" ] || [ $a = "--help" ]; then
        SHOW_HELP=1 
    elif [ $a = "-l" ] || [ $a = "--list-domains" ]; then
        LIST_DOMAINS=1
    elif [ $a = "-hl" ] || [ $a = "-lh" ]; then
        SHOW_HELP=1
        LIST_DOMAINS=1
    elif [ -z $COMMAND ]; then
        COMMAND=$a
    elif [ -z $DOMAIN ]; then
        DOMAIN=$a
    elif [ -z $VALUE ]; then
        VALUE=$a
    fi
done

# Show help
if [ $SHOW_HELP -eq 1 ]; then
    print_help
fi

# List domains
if [ $LIST_DOMAINS -eq 1 ]; then
    print_domains
fi

# Lowercase Command
# COMMAND= $( tr '[:upper:]' '[:lower:]' $COMMAND )

SHOULD_GET=0
SHOULD_SET=0
SHOULD_SUBSCRIBE=0

if [[ -n $COMMAND ]]; then
    if [ $COMMAND = "get" ]; then
        SHOULD_GET=1
    elif [ $COMMAND = "set" ]; then
        SHOULD_SET=1
    elif [ $COMMAND = "subscribe" ]; then
        SHOULD_SUBSCRIBE=1
    else
        if [ $SHOW_HELP -eq 0 ] && [ $LIST_DOMAINS -eq 0 ]; then
            printf "Error: did not understand command\n" 1>&2
            print_help
            exit 1
        fi
    fi
fi

# Actions

TOKEN=#`date +"%T"`

if [ $SHOULD_GET -eq 1 ]; then
    if [[ -z $DOMAIN ]]; then
        printf "Error: missing domain to get\n"
        print_help
        exit 1
    fi
    echo "$TOKEN $DOMAIN GET" | nc -U /tmp/pidee.sock
fi

if [ $SHOULD_SUBSCRIBE -eq 1 ]; then
    if [[ -z $DOMAIN ]]; then
        printf "Error: missing domain to subscribe\n"
        print_help
        exit 1
    fi
    echo "$TOKEN $DOMAIN GET" | nc -q -1 -U /tmp/pidee.sock
fi

if [ $SHOULD_SET -eq 1 ]; then
    if [[ -z $DOMAIN ]]; then
        printf "Error: missing domain\n" 1>&2
        print_help
        exit 1
    fi
    if [[ -z $VALUE ]]; then
        printf "Error: missing value\n" 1>&2
        exit 1
    fi
    echo "$TOKEN $DOMAIN SET $VALUE" | nc -U /tmp/pidee.sock
fi



